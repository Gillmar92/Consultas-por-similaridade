-- Este arquivo contém a criação de todo o trabalho presente nos PI do MÓDULO 2 E MÓDULO 3, levando em conta que o trabalho do módulo 3 é uma continuidade
-- Criação do Banco de Dados foi feita com o seguinte comando:
-- CREATE database vendas_jogos

-- Criação das tabelas presentes no Banco de Dados

CREATE TABLE vendas (
	cod_venda INT NOT NULL,
    pais VARCHAR(6),
	continente VARCHAR(25),
	CONSTRAINT venda_pk PRIMARY KEY (cod_venda),
	CONSTRAINT continente_check CHECK (continente in ('America do Norte','Europa','Asia','Outro'))
);

CREATE TABLE game(
    cod_jogo INT NOT NULL,
	jogo VARCHAR(50),
	genero VARCHAR(15),
	plataforma VARCHAR(20),
	CONSTRAINT jogo_pk PRIMARY KEY (cod_jogo)
);

CREATE TABLE ano_lancamento(
	ano_release INT NOT NULL,
	CONSTRAINT ano_pk PRIMARY KEY (ano_release)
);

CREATE TABLE vendas_jogos(
	cod_venda INT NOT NULL,
    cod_jogo INT NOT NULL,
	ano_release INT NOT NULL,
    vendas_milhoes NUMERIC,
    CONSTRAINT vendas_jogos_pk PRIMARY KEY (cod_venda,cod_jogo,ano_release)
);

CREATE TABLE jogos_caracteristicas(
	cod_jogo INT NOT NULL,
	jogo VARCHAR(50),
	features FLOAT[],
	CONSTRAINT jogos_carac_pk PRIMARY KEY (cod_jogo)
);



---------- Definição das chaves estrangeiras -------------
ALTER TABLE vendas_jogos ADD CONSTRAINT cod_venda_fk FOREIGN KEY (cod_venda)
    REFERENCES vendas(cod_venda) ON DELETE CASCADE;
    
ALTER TABLE vendas_jogos ADD CONSTRAINT jogo_fk FOREIGN KEY (cod_jogo)
    REFERENCES game(cod_jogo) ON DELETE CASCADE;
   
ALTER TABLE vendas_jogos ADD CONSTRAINT ano_fk FOREIGN KEY (ano_release)
    REFERENCES ano_lancamento(ano_release) ON DELETE CASCADE;
	
ALTER TABLE jogos_caracteristicas ADD CONSTRAINT carac_fk FOREIGN KEY (cod_jogo)
	REFERENCES game(cod_jogo) ON DELETE CASCADE
	
	
--------Inserção na tabela de jogos_Características-------------
select * from jogos_caracteristicas;
delete from  jogos_caracteristicas
INSERT INTO jogos_caracteristicas VALUES (  1060,'Super Mario 64 DS','{0,0.675,0.287857142857143,0.4,0,0.103585657370518,0.0546726248299981,0.2676393728223,0.0634920634920635,0.159063480569636,0.0728533550887212,0.0630322658030467,0.0953389830508475,0.273972602739726,0.0714131257433236,0.0970019342359768,0.058694699956198,0.116641337386018,0.0402298850574713,0.12938816449348,0.152966926070039,0.10574478901881,0.195652173913043,0.0428265524625268,0.167440061871616}'),
											(1012,'Mario Kart DS','{0,0.825,0.666428571428571,0.6,0.25,0.028194912657064,0.0324460850981154,0.0664198606271777,0.105006105006105,0.0333091962346126,0.04009789924536,0.0455799448242773,0.0476694915254237,0.438356164383562,0.0335171369877825,0.0146034816247582,0.0154767119287487,0.0311550151975684,0.0632183908045977,0.0237378803075894,0.0136186770428016,0.0222419928825623,0.0507246376811594,0.0728051391862955,0.0135344160866203}'),
											(1011,'Nintendogs','{0,0.625,0.647142857142857,0.48,0.25,0.205741138012054,0.136118127064309,0.313371080139373,0.00488400488400488,0.282645426019792,0.244748113399959,0.179920834832674,0.317796610169492,0.0136986301369863,0.324359390204346,0.203965183752418,0.114323258869908,0.221219604863222,0,0.323303243062521,0.351896887159533,0.32308083375699,0.306521739130435,0.0107066381156317,0.372389791183295}'),
											(1020,'Brain Agey: More Training in Minutes a Day!','{0,0.475,0.213571428571429,0.12,0.25,0.0455613443661252,0.0433650670293375,0.143728222996516,0.00244200244200244,0.0601013758146271,0.00244748113399959,0.00179920834832674,0.00317796610169492,0.0136986301369863,0.00324359390204346,0.0878143133462282,0.0575753151311627,0.0596504559270517,0.0028735632183908,0.116850551654965,0.0498540856031128,0.0580833756990341,0,0.00428265524625268,0}'),
											(1044,'Animal Crossing: Wild World','{0,0.7,0.138571428571429,0.4,0.25,1,1,1,0.0231990231990232,1,1,1,1,0.0547945205479452,1,1,0.745412955662627,1,0.0201149425287356,1,1,1,1,0.0214132762312634,1}'),
											(1008,'Wii Play','{0.2,0,1,0,0.5,0,0,0,0.00732600732600733,0,0,0,0,0,0,0.0131528046421663,0.00467221492188641,0.0392287234042553,0.0028735632183908,0.0404546974256102,0.00340466926070038,0.00432130147432638,0.0434782608695652,0.0149892933618844,0.00928074245939675}'),
											(1007,'New Super Mario Bros.','{0,0.775,0.669285714285714,0.52,0.5,0.0270712023700071,0.0307752088595298,0.0653310104529617,0.184371184371184,0.0395848419020034,0.0417703446869264,0.044950221902363,0.0492584745762712,0.452054794520548,0.0346523948534977,0.0158607350096712,0.018591521876673,0.0311550151975684,0.109195402298851,0.0222333667669676,0.0488813229571984,0.0739705134722928,0.0869565217391304,0.17558886509636,0.0537509667440062}'),
											(1021,'Pokemon Pearl','{0,0.675,0.436428571428571,0.48,0.5,0.583818571866381,0.882067223625413,0.705574912891986,0.302808302808303,0.591358918657977,0.649071996736692,0.842599256327216,0.699152542372881,0.534246575342466,0.530435722780841,0.576595744680851,1,0.430091185410334,0.264367816091954,0.53259779338014,0.5659046692607,0.554270462633452,0.592995169082126,0.254817987152034,0.534416086620263}'),
											(1025,'Grand Theft Auto: Vice City Stories','{0,0.7,0.0757142857142857,0.12,0.5,0.0932679538257228,0.0725471148241694,0.172909407665505,0.0488400488400488,0.155684286748733,0.111645931062615,0.0952980688497061,0.14698093220339,0.0547945205479452,0.123148448480917,0.101644100580271,0.0665790626368813,0.116641337386018,0.0201149425287356,0.146439317953862,0.186770428015564,0.178317234367056,0.221739130434783,0.0663811563169165,0.237819025522042}'),
											(1006,'Tetris DS','{0,0.65,0,0.12,0.5,0.13229134743079,0.0589081018068778,0.30705574912892,0.00366300366300366,0.26840453777456,0.0819906179889863,0.0634220942785175,0.10646186440678,0.0273972602739726,0.10298410638988,0.149709864603482,0.0814230787949579,0.185030395136778,0.0028735632183908,0.248913406887329,0.188229571984436,0.0951957295373665,0.231884057971014,0.00428265524625268,0.326372776488786}'),
											(1014,'Wii Fit','{0,0.55,0.638571428571429,0.4,0.75,0.00153233220962305,0.00365261317272198,0,0.00732600732600733,0.0101375814627082,0,0,0,0,0,0.0220502901353965,0.0113398549666618,0.0482522796352584,0.0028735632183908,0.0483116014710799,0,0,0.042512077294686,0.0149892933618844,0.0224284609435422}'),
											(1045,'Halo 3','{0.6,0.9,0.526428571428571,0.4,0.75,0.0277862907344979,0.0615504177190596,0.0664198606271777,0.400488400488401,0.0494810523775042,0.0408321435855599,0.0682199832073888,0.0476694915254237,0.36986301369863,0.0402746242837063,0.0264990328820116,0.0469168248406093,0.036854103343465,0.201149425287356,0.0250752256770311,0.0732003891050584,0.0763853584138281,0.115942028985507,0.498929336188437,0.0897138437741686}'),
											(1071,'Call of Duty 4: Modern Warfare','{0.6,0.9,0.365,0.6,0.75,0.0134845234446828,0.0473285408976103,0.039198606271777,0.744810744810745,0.020757904899831,0.0407505608810932,0.0560153532445724,0.0476694915254237,0.684931506849315,0.0367066709914585,0.00870406189555126,0.0578186596583443,0.0254559270516717,0.272988505747126,0.0108659311267135,0.0423151750972763,0.0685053380782918,0.0869565217391304,1,0.0452436194895592}'),
											(1050,'Super Mario Galaxy','{0.2,0.975,0.305714285714286,1,0.75,0.116559403411993,0.100524577423742,0.209059233449477,0.346764346764347,0.145546705286025,0.108423414236182,0.112780376634281,0.143008474576271,0.835616438356164,0.0911449886474213,0.106286266924565,0.097727162116124,0.127184650455927,0.247126436781609,0.12938816449348,0.166828793774319,0.15976105744789,0.202898550724638,0.297644539614561,0.168213457076566}'),
											(1075,'Mario Party DS','{0,0.35,0.262857142857143,0.52,0.75,0.0135866789253243,0.0122789974742569,0.0374564459930314,0.00610500610500611,0.0275162925416365,0.0195798490719967,0.0143936667866139,0.0254237288135593,0.0136986301369863,0.0259487512163477,0,0.0032121477587969,0,0.0028735632183908,0,0.060068093385214,0.0705388917132689,0.085024154589372,0.0107066381156317,0.0630317092034029}'),
											(1087,'Mario & Sonic at the Olympic Games','{0.6,0.225,0.148571428571429,0.6,0.75,0.020941873531515,0.00373032834660968,0.0653310104529617,0,0.0685493603668839,0.0244748113399959,0.0188916876574307,0.0317796610169492,0.0273972602739726,0.0308141420694129,0.00802707930367506,0,0.0287803951367781,0,0.0386158475426279,0.0459630350194552,0.0194458566344687,0.0869565217391304,0,0.104795050270688}'),
											(1003,'Mario Kart Wii','{0.6,0.6,0.837857142857143,0.6,1,0.0342220860149147,0.0505537206139499,0.0668554006968641,0.125763125763126,0.0407916968380401,0.0467876810116255,0.0567050497780976,0.0540254237288136,0.397260273972603,0.0461130933073846,0.0293036750483559,0.0611281452280138,0.0311550151975684,0.0804597701149425,0.0287529254429957,0.0269941634241245,0.0626588713777326,0.0579710144927536,0.102783725910064,0.0274555297757154}'),
											(1052,'Grand Theft Auto IV','{0,1,0.364285714285714,0.4,1,0.202676473592808,0.336351272585972,0.365853658536585,1,0.266473569876901,0.203018560065266,0.316180880412618,0.254237288135593,1,0.172667315385447,0.195357833655706,0.181340341655716,0.202127659574468,1,0.231026412571046,0.356031128404669,0.323589222165735,0.391304347826087,0.856531049250535,0.361175560711524}'),
											(1040,'Super Smash Bros.: Brawl','{1,0.875,0.360714285714286,1,1,0.279599550515885,0.775830580920925,0.143728222996516,0.153846153846154,0.214096065652909,0.477585151947787,0.732517692215425,0.429025423728814,0.205479452054795,0.373121418531733,0.323887814313346,0.494330072516669,0.274031155015198,0.132183908045977,0.288030758943497,0.102140077821012,0.127732587697,0.130434782608696,0.143468950749465,0.0978344934261408}'),
											(1058,'Grand Theft Auto IV','{0,1,0.232142857142857,0.4,1,0.202676473592808,0.336351272585972,0.365853658536585,1,0.266473569876901,0.203018560065266,0.316180880412618,0.254237288135593,1,0.172667315385447,0.195357833655706,0.181340341655716,0.202127659574468,1,0.231026412571046,0.356031128404669,0.323589222165735,0.391304347826087,0.856531049250535,0.361175560711524}');



----Consultas no banco de dados------------------
--Média de receita gerada por plataforma de jogo entre 1985 e 2000
SELECT ga.plataforma,a.ano_release,ROUND(AVG(vj.vendas_milhoes),2) AS media_receita
FROM game as ga,vendas_jogos as vj,ano_lancamento as a
WHERE ga.cod_jogo = vj.cod_jogo AND
      a.ano_release = vj.ano_release AND
      a.ano_release BETWEEN 1985 AND 2000
GROUP BY a.ano_release,ga.plataforma
ORDER BY a.ano_release,ga.plataforma

--Média de receita gerada por genero de jogo em cada plataforma entre 1985 e 2000: Drill down da consulta anterior
SELECT ga.plataforma,ga.genero,a.ano_release,ROUND(AVG(vj.vendas_milhoes),2) AS media_receita
FROM game as ga,vendas_jogos as vj,ano_lancamento as a
WHERE ga.cod_jogo = vj.cod_jogo AND
      a.ano_release = vj.ano_release AND
      a.ano_release BETWEEN 1985 AND 2000
GROUP BY ga.plataforma,ga.genero,a.ano_release
ORDER BY ga.plataforma,ga.genero,a.ano_release

--Soma da receita gerada por todos os jogos lançados em 2006 No Japão
SELECT v.pais,v.continente,a.ano_release,ROUND(SUM(vj.vendas_milhoes),2) AS soma_receita
FROM vendas as v,ano_lancamento as a,vendas_jogos as vj
WHERE a.ano_release = vj.ano_release AND
      v.cod_venda = vj.cod_venda AND
      a.ano_release = 2006 AND
      v.pais = 'Japao'
GROUP BY v.pais,v.continente,a.ano_release

--Soma da receita gerada por todos os jogos lançados em 2006 na ásia: Roll-up da consulta anterior
SELECT v.continente,a.ano_release,ROUND(SUM(vj.vendas_milhoes),2) AS soma_receita
FROM vendas as v,ano_lancamento as a,vendas_jogos as vj
WHERE a.ano_release = vj.ano_release AND
      v.cod_venda = vj.cod_venda AND
      a.ano_release = 2006 AND
      v.continente = 'Asia'
GROUP BY v.continente,a.ano_release

--Receita máxima dos jogos entre 2000 e 2006
SELECT ga.jogo, a.ano_release,MAX(vj.vendas_milhoes) AS max_receita
FROM game as ga,ano_lancamento as a,vendas_jogos as vj
WHERE ga.cod_jogo = vj.cod_jogo AND
      a.ano_release = vj.ano_release AND
      a.ano_release BETWEEN 2000 AND 2006
GROUP BY a.ano_release,ga.jogo
Order BY a.ano_release

--Receita máxima dos jogos do genero RPG entre 2000 e 2006 (SLICE da consulta anterior))
SELECT ga.jogo, a.ano_release,MAX(vj.vendas_milhoes) AS max_receita
FROM game as ga,ano_lancamento as a,vendas_jogos as vj
WHERE ga.cod_jogo = vj.cod_jogo AND
      a.ano_release = vj.ano_release AND
      a.ano_release BETWEEN 2000 AND 2006 AND
      ga.genero = 'Role-Playing'
GROUP BY a.ano_release,ga.jogo
Order BY a.ano_release


--------VISÕES FRAGMENTADAS------------------------
CREATE TABLE vendas_85_00 AS (
    SELECT ga.plataforma,ga.genero,a.ano_release,vj.vendas_milhoes
    FROM game as ga,ano_lancamento as a,vendas_jogos as vj
    WHERE ga.cod_jogo = vj.cod_jogo AND
          a.ano_release = vj.ano_release AND
          a.ano_release BETWEEN 1985 AND 2000
);

CREATE TABLE vendas_lugar_06 AS (
SELECT v.pais,v.continente,a.ano_release,vj.vendas_milhoes
FROM ano_lancamento as a, vendas as v, vendas_jogos as vj
WHERE a.ano_release = vj.ano_release AND
      v.cod_venda = vj.cod_venda AND
      a.ano_release = 2006
);

CREATE TABLE venda_jogo_00_06 AS (
SELECT ga.jogo,ga.genero, a.ano_release,vj.vendas_milhoes
FROM game as ga,ano_lancamento as a,vendas_jogos as vj
WHERE ga.cod_jogo = vj.cod_jogo AND
      a.ano_release = vj.ano_release AND
      a.ano_release BETWEEN 2000 AND 2006
);

--------------CRIAÇÃO DOS ÍNDICES---------------
CREATE EXTENSION btree_gin;
CREATE EXTENSION pg_trgm;

-----Índice para a visão fragmentada do grupo de consultas I
CREATE INDEX idxplataforma ON vendas_85_00 using gin(plataforma);
CREATE INDEX idxgenero ON vendas_85_00 using gin(genero);
CREATE INDEX idxano ON vendas_85_00(ano_release);

---Indice para visão fragmentada do grupo de consultas II
CREATE INDEX idxpais ON vendas_lugar_06 using gin(pais);
CREATE INDEX idxcontinente ON vendas_lugar_06 using gin(continente);

----Indice para visão fragmentada do grupo de consultas III
CREATE INDEX idxjogoTrgm ON venda_jogo_00_06 using gin(jogo gin_trgm_ops);
CREATE INDEX idxgenerogame ON venda_jogo_00_06 using gin(genero);

-------TRIGGER para a inclusão de novos jogos--------------
CREATE OR REPLACE FUNCTION insere_jogo()
RETURNS TRIGGER AS $novo_jogo$
BEGIN
    INSERT INTO venda_jogo_00_06 (SELECT ga.jogo,ga.genero,a.ano_release,new.vendas_milhoes FROM game as ga,ano_lancamento as a, vendas_jogos as vj
                                   WHERE ga.cod_jogo = new.cod_jogo AND
                                          a.ano_release = new.ano_release AND
                                          a.ano_release BETWEEN 2000 AND 2006
                                    group by ga.jogo,a.ano_release);
RETURN NEW;
END;
$novo_jogo$ LANGUAGE plpgsql;

CREATE TRIGGER novo_jogo AFTER INSERT ON vendas_jogos
FOR EACH ROW EXECUTE PROCEDURE insere_jogo();

--INSERÇÕES PARA TESTE DO TRIGGER
INSERT INTO game VALUES (4111,'Kingdom HeartsII','Role-Playing','PS2');
INSERT INTO game VALUES (1111,'Kingdom hearts', 'Role-Playing','PS2');
INSERT INTO vendas VALUES (401,'Japao','Asia');
INSERT INTO vendas VALUES (402,'Japao','Asia');
INSERT INTO vendas VALUES (403,NULL,'Europa');
INSERT INTO ano_lancamento VALUES (2002);
INSERT INTO vendas_jogos VALUES (401,4111,2006,59.1);
INSERT INTO vendas_jogos VALUES (402,1111,2002,60.5);
INSERT INTO vendas_jogos VALUES (402,4111,2007,80.5);
INSERT INTO vendas_jogos VALUES (402,4111,2006,78.5);                               
 Select * from venda_jogo_00_06                           

---------Criação de usuários---------------------
CREATE USER gerente_vendas WITH PASSWORD 'senha123';
GRANT SELECT ON ALL TABLES IN SCHEMA public TO gerente_vendas;
GRANT UPDATE ON ALL TABLES IN SCHEMA public TO gerente_vendas; --O gerente tem pleno acesso ao dados

CREATE USER analista_vendas WITH PASSWORD 'senha123';
GRANT SELECT ON ALL TABLES IN SCHEMA public TO analista_vendas; --O analista pode ver todas as tabelas para produzir insights

CREATE USER assessor_imprensa WITH PASSWORD 'senha123';
GRANT SELECT ON visao_imprensa TO assessor_imprensa; -- O assessor pode ver os jogos,
-- seu ano de lançamento e o quanto eles venderam

---VISÃO PARA O ASSESSOR DE IMPRENSA
CREATE TABLE visao_imprensa AS(
    SELECT ga.jogo,ga.genero,ga.plataforma,a.ano_release,ROUND(SUM(vendas_milhoes),2)
    FROM game as ga,ano_lancamento as a,vendas_jogos as vj
    WHERE ga.cod_jogo = vj.cod_jogo AND
          a.ano_release = vj.ano_release
    GROUP BY ga.jogo,ga.genero,ga.plataforma,a.ano_release
    ORDER BY plataforma
);

------------------------------------------------------------------------------------------
-- Função de distância L1 --
create or replace function l1(elem1 float[], elem2 float[]) returns float as $$
declare
 size integer;
 somat float;
begin
  size := cardinality(elem1);
 somat := 0;
 for i in 1..size loop
    somat := somat + ABS(elem1[i] - elem2[i]);
 end loop;
 return somat;
end $$
language plpgsql; 

-- Função de distância L2 --
create or replace function l2(elem1 float[], elem2 float[]) returns float as $$
declare
 size integer;
 somat float;
begin
 size := cardinality(elem1);
 somat := 0;
 for i in 1..size loop
    somat := somat + (ABS(elem1[i] - elem2[i])*ABS(elem1[i] - elem2[i]));
 end loop;
 return sqrt(somat);
end $$
language plpgsql; 

-- Função de distância Linf --
create or replace function linf(elem1 float[], elem2 float[]) returns float as $$
declare
 size integer;
 vmax float;
 dist float;
begin
  size := cardinality(elem1);
  vmax := 0;
  for i in 1..size loop
     dist := ABS(elem1[i] - elem2[i]);
	 if (dist > vmax) then
	    vmax := dist;
	 end if;
  end loop;
 return vmax;
end $$
language plpgsql; 

--------- RangeQuery L1 ----------------
create or replace function RangeQueryl1(qc float[], radius float) 
 returns table (cod_jogo integer,jogo varchar,distance float) as $$
 begin
  return query 
      select jogos_caracteristicas.cod_jogo, jogos_caracteristicas.jogo, l1(features,qc) as distance
      from jogos_caracteristicas
      where l1(features,qc) <= radius;
 
 end $$
 language plpgsql; 


 ----------- RangeQuery L2 ----------
 create or replace function RangeQueryl2(qc float[], radius float) 
 returns table (cod_jogo integer,jogo varchar,distance float) as $$
 begin
  return query 
      select jogos_caracteristicas.cod_jogo, jogos_caracteristicas.jogo, l2(features,qc) as distance
      from jogos_caracteristicas
      where l2(features,qc) <= radius;
 end $$
 language plpgsql; 
 

 
 --------RangeQuery Linf ------------
create or replace function RangeQuerylinf(qc float[], radius float) 
returns table (cod_jogo integer,jogo varchar,distance float) as $$
 begin
  return query 
      select jogos_caracteristicas.cod_jogo, jogos_caracteristicas.jogo, linf(features,qc) as distance
      from jogos_caracteristicas
      where linf(features,qc) <= radius;
  end $$
 language plpgsql; 
 

 
------- Consultas com Range Query ------------------
-- Consultas com RangeQuery Tomando como referencia Super Mario 64 DS--
SELECT * FROM Rangequeryl1(array[0,0.675,0.287857142857143,0.4,0,0.103585657370518,0.0546726248299981,0.2676393728223,0.0634920634920635,0.159063480569636,0.0728533550887212,0.0630322658030467,0.0953389830508475,0.273972602739726,0.0714131257433236,0.0970019342359768,0.058694699956198,0.116641337386018,0.0402298850574713,0.12938816449348,0.152966926070039,0.10574478901881,0.195652173913043,0.0428265524625268,0.167440061871616],2)
ORDER BY distance
SELECT * FROM Rangequeryl2(array[0,0.675,0.287857142857143,0.4,0,0.103585657370518,0.0546726248299981,0.2676393728223,0.0634920634920635,0.159063480569636,0.0728533550887212,0.0630322658030467,0.0953389830508475,0.273972602739726,0.0714131257433236,0.0970019342359768,0.058694699956198,0.116641337386018,0.0402298850574713,0.12938816449348,0.152966926070039,0.10574478901881,0.195652173913043,0.0428265524625268,0.167440061871616],2)
ORDER BY distance
SELECT * FROM Rangequerylinf(array[0,0.675,0.287857142857143,0.4,0,0.103585657370518,0.0546726248299981,0.2676393728223,0.0634920634920635,0.159063480569636,0.0728533550887212,0.0630322658030467,0.0953389830508475,0.273972602739726,0.0714131257433236,0.0970019342359768,0.058694699956198,0.116641337386018,0.0402298850574713,0.12938816449348,0.152966926070039,0.10574478901881,0.195652173913043,0.0428265524625268,0.167440061871616],2)
ORDER BY distance

-- Consultas com RangeQuery Tomando como referencia Call of duty 4: Modern Warfare--
SELECT * FROM Rangequeryl1(array[0.6,0.9,0.365,0.6,0.75,0.0134845234446828,0.0473285408976103,0.039198606271777,0.744810744810745,0.020757904899831,0.0407505608810932,0.0560153532445724,0.0476694915254237,0.684931506849315,0.0367066709914585,0.00870406189555126,0.0578186596583443,0.0254559270516717,0.272988505747126,0.0108659311267135,0.0423151750972763,0.0685053380782918,0.0869565217391304,1,0.0452436194895592],2)
ORDER BY distance
SELECT * FROM Rangequeryl2(array[0.6,0.9,0.365,0.6,0.75,0.0134845234446828,0.0473285408976103,0.039198606271777,0.744810744810745,0.020757904899831,0.0407505608810932,0.0560153532445724,0.0476694915254237,0.684931506849315,0.0367066709914585,0.00870406189555126,0.0578186596583443,0.0254559270516717,0.272988505747126,0.0108659311267135,0.0423151750972763,0.0685053380782918,0.0869565217391304,1,0.0452436194895592],2)
ORDER BY distance
SELECT * FROM Rangequerylinf(array[0.6,0.9,0.365,0.6,0.75,0.0134845234446828,0.0473285408976103,0.039198606271777,0.744810744810745,0.020757904899831,0.0407505608810932,0.0560153532445724,0.0476694915254237,0.684931506849315,0.0367066709914585,0.00870406189555126,0.0578186596583443,0.0254559270516717,0.272988505747126,0.0108659311267135,0.0423151750972763,0.0685053380782918,0.0869565217391304,1,0.0452436194895592],2)
ORDER BY distance

-- Consultas com RangeQuery Tomando como referencia Mario & Sonic at the Olympic Games--
SELECT * FROM Rangequeryl1(array[0.6,0.225,0.148571428571429,0.6,0.75,0.020941873531515,0.00373032834660968,0.0653310104529617,0,0.0685493603668839,0.0244748113399959,0.0188916876574307,0.0317796610169492,0.0273972602739726,0.0308141420694129,0.00802707930367506,0,0.0287803951367781,0,0.0386158475426279,0.0459630350194552,0.0194458566344687,0.0869565217391304,0,0.104795050270688],2)
ORDER BY distance
SELECT * FROM Rangequeryl2(array[0.6,0.225,0.148571428571429,0.6,0.75,0.020941873531515,0.00373032834660968,0.0653310104529617,0,0.0685493603668839,0.0244748113399959,0.0188916876574307,0.0317796610169492,0.0273972602739726,0.0308141420694129,0.00802707930367506,0,0.0287803951367781,0,0.0386158475426279,0.0459630350194552,0.0194458566344687,0.0869565217391304,0,0.104795050270688],2)
ORDER BY distance
SELECT * FROM Rangequerylinf(array[0.6,0.225,0.148571428571429,0.6,0.75,0.020941873531515,0.00373032834660968,0.0653310104529617,0,0.0685493603668839,0.0244748113399959,0.0188916876574307,0.0317796610169492,0.0273972602739726,0.0308141420694129,0.00802707930367506,0,0.0287803951367781,0,0.0386158475426279,0.0459630350194552,0.0194458566344687,0.0869565217391304,0,0.104795050270688],2)
ORDER BY distance

------- Consultas com KNN -----------
-- Função KNN L1 --
create or replace function KNNl1(qc float[], k integer) 
returns table (cod_jogo integer,jogo varchar,distance float) as $$
 begin
  return query 
      select jogos_caracteristicas.cod_jogo, jogos_caracteristicas.jogo, l1(features,qc) as distance
      from jogos_caracteristicas
      order by l1(features,qc) LIMIT k;
 end $$
 language plpgsql; 
 
 --Função KNN L2--
  create or replace function KNNl2(qc float[], k integer) 
returns table (cod_jogo integer,jogo varchar,distance float) as $$
 begin
  return query 
      select jogos_caracteristicas.cod_jogo, jogos_caracteristicas.jogo, l2(features,qc) as distance
      from jogos_caracteristicas
      order by l2(features,qc) LIMIT k;
 
 end $$
 language plpgsql; 
 
 -- Consultas com KNN Tomando como referencia Super Mario 64 DS--
SELECT * FROM KNNl1(array[0,0.675,0.287857142857143,0.4,0,0.103585657370518,0.0546726248299981,0.2676393728223,0.0634920634920635,0.159063480569636,0.0728533550887212,0.0630322658030467,0.0953389830508475,0.273972602739726,0.0714131257433236,0.0970019342359768,0.058694699956198,0.116641337386018,0.0402298850574713,0.12938816449348,0.152966926070039,0.10574478901881,0.195652173913043,0.0428265524625268,0.167440061871616],5)
ORDER BY distance
SELECT * FROM KNNl2(array[0,0.675,0.287857142857143,0.4,0,0.103585657370518,0.0546726248299981,0.2676393728223,0.0634920634920635,0.159063480569636,0.0728533550887212,0.0630322658030467,0.0953389830508475,0.273972602739726,0.0714131257433236,0.0970019342359768,0.058694699956198,0.116641337386018,0.0402298850574713,0.12938816449348,0.152966926070039,0.10574478901881,0.195652173913043,0.0428265524625268,0.167440061871616],5)
ORDER BY distance

-- Consultas com KNN Tomando como referencia Call of duty 4: Modern Warfare--
SELECT * FROM KNNl1(array[0.6,0.9,0.365,0.6,0.75,0.0134845234446828,0.0473285408976103,0.039198606271777,0.744810744810745,0.020757904899831,0.0407505608810932,0.0560153532445724,0.0476694915254237,0.684931506849315,0.0367066709914585,0.00870406189555126,0.0578186596583443,0.0254559270516717,0.272988505747126,0.0108659311267135,0.0423151750972763,0.0685053380782918,0.0869565217391304,1,0.0452436194895592],5)
ORDER BY distance
SELECT * FROM KNNl2(array[0.6,0.9,0.365,0.6,0.75,0.0134845234446828,0.0473285408976103,0.039198606271777,0.744810744810745,0.020757904899831,0.0407505608810932,0.0560153532445724,0.0476694915254237,0.684931506849315,0.0367066709914585,0.00870406189555126,0.0578186596583443,0.0254559270516717,0.272988505747126,0.0108659311267135,0.0423151750972763,0.0685053380782918,0.0869565217391304,1,0.0452436194895592],5)
ORDER BY distance

-- Consultas com KNN Tomando como referencia Mario & Sonic at the Olympic Games--
SELECT * FROM KNNl1(array[0.6,0.225,0.148571428571429,0.6,0.75,0.020941873531515,0.00373032834660968,0.0653310104529617,0,0.0685493603668839,0.0244748113399959,0.0188916876574307,0.0317796610169492,0.0273972602739726,0.0308141420694129,0.00802707930367506,0,0.0287803951367781,0,0.0386158475426279,0.0459630350194552,0.0194458566344687,0.0869565217391304,0,0.104795050270688],5)
ORDER BY distance
SELECT * FROM KNNl2(array[0.6,0.225,0.148571428571429,0.6,0.75,0.020941873531515,0.00373032834660968,0.0653310104529617,0,0.0685493603668839,0.0244748113399959,0.0188916876574307,0.0317796610169492,0.0273972602739726,0.0308141420694129,0.00802707930367506,0,0.0287803951367781,0,0.0386158475426279,0.0459630350194552,0.0194458566344687,0.0869565217391304,0,0.104795050270688],5)
ORDER BY distance